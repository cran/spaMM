// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Rcpp_COMP_Z
SEXP Rcpp_COMP_Z(int moment, double nu, double lambda, int maxn);
RcppExport SEXP spaMM_Rcpp_COMP_Z(SEXP momentSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP maxnSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type moment(momentSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxn(maxnSEXP);
    __result = Rcpp::wrap(Rcpp_COMP_Z(moment, nu, lambda, maxn));
    return __result;
END_RCPP
}
// Rcpp_pMVN
SEXP Rcpp_pMVN(NumericMatrix& L, NumericVector& limits, IntegerVector& ismax, NumericMatrix& rand_seq, int nrep);
RcppExport SEXP spaMM_Rcpp_pMVN(SEXP LSEXP, SEXP limitsSEXP, SEXP ismaxSEXP, SEXP rand_seqSEXP, SEXP nrepSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix& >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type limits(limitsSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type ismax(ismaxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type rand_seq(rand_seqSEXP);
    Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP);
    __result = Rcpp::wrap(Rcpp_pMVN(L, limits, ismax, rand_seq, nrep));
    return __result;
END_RCPP
}
// Rcpp_gibbs_iter
SEXP Rcpp_gibbs_iter(SEXP fix, Rcpp::IntegerVector y, double lambda, int n_u_h, SEXP randbGivenObs, bool ZAisI, double eps, Rcpp::List CondNorm, SEXP ZA, Rcpp::List forV, SEXP LHSCorrblob, SEXP condL);
RcppExport SEXP spaMM_Rcpp_gibbs_iter(SEXP fixSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP n_u_hSEXP, SEXP randbGivenObsSEXP, SEXP ZAisISEXP, SEXP epsSEXP, SEXP CondNormSEXP, SEXP ZASEXP, SEXP forVSEXP, SEXP LHSCorrblobSEXP, SEXP condLSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type fix(fixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_u_h(n_u_hSEXP);
    Rcpp::traits::input_parameter< SEXP >::type randbGivenObs(randbGivenObsSEXP);
    Rcpp::traits::input_parameter< bool >::type ZAisI(ZAisISEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type CondNorm(CondNormSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ZA(ZASEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type forV(forVSEXP);
    Rcpp::traits::input_parameter< SEXP >::type LHSCorrblob(LHSCorrblobSEXP);
    Rcpp::traits::input_parameter< SEXP >::type condL(condLSEXP);
    __result = Rcpp::wrap(Rcpp_gibbs_iter(fix, y, lambda, n_u_h, randbGivenObs, ZAisI, eps, CondNorm, ZA, forV, LHSCorrblob, condL));
    return __result;
END_RCPP
}
// Rcpp_gibbs_debug
SEXP Rcpp_gibbs_debug(SEXP fix, Rcpp::IntegerVector y, Rcpp::List decomp, bool estimCARrho, double lambda, int n_u_h, SEXP randbGivenObs, bool ZAisI, double eps, Rcpp::List CondNorm, SEXP ZA, Rcpp::List forV, SEXP LHSCorrblob, SEXP condL);
RcppExport SEXP spaMM_Rcpp_gibbs_debug(SEXP fixSEXP, SEXP ySEXP, SEXP decompSEXP, SEXP estimCARrhoSEXP, SEXP lambdaSEXP, SEXP n_u_hSEXP, SEXP randbGivenObsSEXP, SEXP ZAisISEXP, SEXP epsSEXP, SEXP CondNormSEXP, SEXP ZASEXP, SEXP forVSEXP, SEXP LHSCorrblobSEXP, SEXP condLSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type fix(fixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type decomp(decompSEXP);
    Rcpp::traits::input_parameter< bool >::type estimCARrho(estimCARrhoSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_u_h(n_u_hSEXP);
    Rcpp::traits::input_parameter< SEXP >::type randbGivenObs(randbGivenObsSEXP);
    Rcpp::traits::input_parameter< bool >::type ZAisI(ZAisISEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type CondNorm(CondNormSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ZA(ZASEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type forV(forVSEXP);
    Rcpp::traits::input_parameter< SEXP >::type LHSCorrblob(LHSCorrblobSEXP);
    Rcpp::traits::input_parameter< SEXP >::type condL(condLSEXP);
    __result = Rcpp::wrap(Rcpp_gibbs_debug(fix, y, decomp, estimCARrho, lambda, n_u_h, randbGivenObs, ZAisI, eps, CondNorm, ZA, forV, LHSCorrblob, condL));
    return __result;
END_RCPP
}
// Rcpp_gibbs
SEXP Rcpp_gibbs(int ngibbs, Rcpp::IntegerVector gibbsSample, bool estimCARrho, Rcpp::List decomp, SEXP fix, Rcpp::IntegerVector y, double lambda, int n_u_h, bool ZAisI, double eps, Rcpp::List CondNorm, SEXP ZA, Rcpp::List forV, SEXP LHSCorrblob, SEXP condL);
RcppExport SEXP spaMM_Rcpp_gibbs(SEXP ngibbsSEXP, SEXP gibbsSampleSEXP, SEXP estimCARrhoSEXP, SEXP decompSEXP, SEXP fixSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP n_u_hSEXP, SEXP ZAisISEXP, SEXP epsSEXP, SEXP CondNormSEXP, SEXP ZASEXP, SEXP forVSEXP, SEXP LHSCorrblobSEXP, SEXP condLSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type ngibbs(ngibbsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type gibbsSample(gibbsSampleSEXP);
    Rcpp::traits::input_parameter< bool >::type estimCARrho(estimCARrhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type decomp(decompSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fix(fixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_u_h(n_u_hSEXP);
    Rcpp::traits::input_parameter< bool >::type ZAisI(ZAisISEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type CondNorm(CondNormSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ZA(ZASEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type forV(forVSEXP);
    Rcpp::traits::input_parameter< SEXP >::type LHSCorrblob(LHSCorrblobSEXP);
    Rcpp::traits::input_parameter< SEXP >::type condL(condLSEXP);
    __result = Rcpp::wrap(Rcpp_gibbs(ngibbs, gibbsSample, estimCARrho, decomp, fix, y, lambda, n_u_h, ZAisI, eps, CondNorm, ZA, forV, LHSCorrblob, condL));
    return __result;
END_RCPP
}
// lmwithQ
SEXP lmwithQ(SEXP XX, SEXP yy);
RcppExport SEXP spaMM_lmwithQ(SEXP XXSEXP, SEXP yySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yy(yySEXP);
    __result = Rcpp::wrap(lmwithQ(XX, yy));
    return __result;
END_RCPP
}
// leverages
SEXP leverages(SEXP XX);
RcppExport SEXP spaMM_leverages(SEXP XXSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type XX(XXSEXP);
    __result = Rcpp::wrap(leverages(XX));
    return __result;
END_RCPP
}
// Rcpp_qr_Q
SEXP Rcpp_qr_Q(SEXP XX);
RcppExport SEXP spaMM_Rcpp_qr_Q(SEXP XXSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type XX(XXSEXP);
    __result = Rcpp::wrap(Rcpp_qr_Q(XX));
    return __result;
END_RCPP
}
// Rcpp_QR
List Rcpp_QR(SEXP XX);
RcppExport SEXP spaMM_Rcpp_QR(SEXP XXSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type XX(XXSEXP);
    __result = Rcpp::wrap(Rcpp_QR(XX));
    return __result;
END_RCPP
}
// sweepZ1W
SEXP sweepZ1W(SEXP ZZ, SEXP WW);
RcppExport SEXP spaMM_sweepZ1W(SEXP ZZSEXP, SEXP WWSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ZZ(ZZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type WW(WWSEXP);
    __result = Rcpp::wrap(sweepZ1W(ZZ, WW));
    return __result;
END_RCPP
}
// ZWZt
SEXP ZWZt(SEXP ZZ, SEXP WW);
RcppExport SEXP spaMM_ZWZt(SEXP ZZSEXP, SEXP WWSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ZZ(ZZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type WW(WWSEXP);
    __result = Rcpp::wrap(ZWZt(ZZ, WW));
    return __result;
END_RCPP
}
// ZtWZ
SEXP ZtWZ(SEXP ZZ, SEXP WW);
RcppExport SEXP spaMM_ZtWZ(SEXP ZZSEXP, SEXP WWSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ZZ(ZZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type WW(WWSEXP);
    __result = Rcpp::wrap(ZtWZ(ZZ, WW));
    return __result;
END_RCPP
}
// Rcpp_Sig
SEXP Rcpp_Sig(SEXP ZZ, SEXP WA, SEXP WB);
RcppExport SEXP spaMM_Rcpp_Sig(SEXP ZZSEXP, SEXP WASEXP, SEXP WBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ZZ(ZZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type WA(WASEXP);
    Rcpp::traits::input_parameter< SEXP >::type WB(WBSEXP);
    __result = Rcpp::wrap(Rcpp_Sig(ZZ, WA, WB));
    return __result;
END_RCPP
}
// Rcpp_d2hdv2
SEXP Rcpp_d2hdv2(SEXP ZZ, SEXP WA, SEXP WB);
RcppExport SEXP spaMM_Rcpp_d2hdv2(SEXP ZZSEXP, SEXP WASEXP, SEXP WBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ZZ(ZZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type WA(WASEXP);
    Rcpp::traits::input_parameter< SEXP >::type WB(WBSEXP);
    __result = Rcpp::wrap(Rcpp_d2hdv2(ZZ, WA, WB));
    return __result;
END_RCPP
}
// RcppChol
SEXP RcppChol(SEXP AA);
RcppExport SEXP spaMM_RcppChol(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    __result = Rcpp::wrap(RcppChol(AA));
    return __result;
END_RCPP
}
// crossprodCpp
SEXP crossprodCpp(SEXP Mat);
RcppExport SEXP spaMM_crossprodCpp(SEXP MatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Mat(MatSEXP);
    __result = Rcpp::wrap(crossprodCpp(Mat));
    return __result;
END_RCPP
}
// tcrossprodCpp
SEXP tcrossprodCpp(SEXP Mat);
RcppExport SEXP spaMM_tcrossprodCpp(SEXP MatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Mat(MatSEXP);
    __result = Rcpp::wrap(tcrossprodCpp(Mat));
    return __result;
END_RCPP
}
// pseudoSolvediag
SEXP pseudoSolvediag(SEXP XX, SEXP bb);
RcppExport SEXP spaMM_pseudoSolvediag(SEXP XXSEXP, SEXP bbSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bb(bbSEXP);
    __result = Rcpp::wrap(pseudoSolvediag(XX, bb));
    return __result;
END_RCPP
}
// e_LevenbergMsolveCpp
SEXP e_LevenbergMsolveCpp(SEXP AA, SEXP wwAugz, SEXP dd);
RcppExport SEXP spaMM_e_LevenbergMsolveCpp(SEXP AASEXP, SEXP wwAugzSEXP, SEXP ddSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type wwAugz(wwAugzSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dd(ddSEXP);
    __result = Rcpp::wrap(e_LevenbergMsolveCpp(AA, wwAugz, dd));
    return __result;
END_RCPP
}
// LevenbergMsolveCpp
SEXP LevenbergMsolveCpp(SEXP AA, SEXP rrhhss, SEXP dd);
RcppExport SEXP spaMM_LevenbergMsolveCpp(SEXP AASEXP, SEXP rrhhssSEXP, SEXP ddSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    Rcpp::traits::input_parameter< SEXP >::type rrhhss(rrhhssSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dd(ddSEXP);
    __result = Rcpp::wrap(LevenbergMsolveCpp(AA, rrhhss, dd));
    return __result;
END_RCPP
}
// LogAbsDetCpp
SEXP LogAbsDetCpp(SEXP AA);
RcppExport SEXP spaMM_LogAbsDetCpp(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    __result = Rcpp::wrap(LogAbsDetCpp(AA));
    return __result;
END_RCPP
}
// selfAdjointSolverCpp
SEXP selfAdjointSolverCpp(SEXP AA);
RcppExport SEXP spaMM_selfAdjointSolverCpp(SEXP AASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type AA(AASEXP);
    __result = Rcpp::wrap(selfAdjointSolverCpp(AA));
    return __result;
END_RCPP
}
// LevPerturbedQCpp
SEXP LevPerturbedQCpp(SEXP perturbedwAugX, SEXP pforREML, SEXP RpRu, SEXP RpRd, SEXP lamOverLam0, SEXP phiOverPhi0);
RcppExport SEXP spaMM_LevPerturbedQCpp(SEXP perturbedwAugXSEXP, SEXP pforREMLSEXP, SEXP RpRuSEXP, SEXP RpRdSEXP, SEXP lamOverLam0SEXP, SEXP phiOverPhi0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type perturbedwAugX(perturbedwAugXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pforREML(pforREMLSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RpRu(RpRuSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RpRd(RpRdSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lamOverLam0(lamOverLam0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type phiOverPhi0(phiOverPhi0SEXP);
    __result = Rcpp::wrap(LevPerturbedQCpp(perturbedwAugX, pforREML, RpRu, RpRd, lamOverLam0, phiOverPhi0));
    return __result;
END_RCPP
}
// zrnorm
Rcpp::NumericVector zrnorm(int n);
RcppExport SEXP spaMM_zrnorm(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(zrnorm(n));
    return __result;
END_RCPP
}
